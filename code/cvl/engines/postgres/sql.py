"""
Temporary tables have a _ prefix
columns generated by CVL have a cvl_ prefix
"""
__author__ = 'kostas'

# BASIC TRANSACTION

BEGIN_TX = \
    """
    BEGIN;
    """

COMMIT_TX = \
    """
    COMMIT;
    """

# INIT


# FRAMEWORK

ADD_FRAMEWORK = \
    """
    -- ST_CellSizeZ

    CREATE OR REPLACE FUNCTION ST_CellSizeZ
    (
      z integer,
      OUT meter_per_pixel float
    ) RETURNS float AS
    $$
    SELECT 40075016.68 / power(2, $1)
    $$ LANGUAGE postgres IMMUTABLE STRICT;

    -- ST_PointHash

    CREATE OR REPLACE FUNCTION ST_PointHash
    (
      pt geometry,
      OUT geohash text
    ) RETURNS text AS
    $$
    SELECT
      ST_GeoHash
      (
        ST_Transform
        (
          $1,
          4326
        )
      ) AS geohash;
    $$ LANGUAGE postgres IMMUTABLE STRICT;

    -- ST_Cellify

    CREATE OR REPLACE FUNCTION ST_Cellify
    (
      geom geometry,
      cell_size float8,
      x0 float8 DEFAULT 0,
      y0 float8 DEFAULT 0,
      OUT pt geometry
    ) RETURNS SETOF geometry AS
    $$
    SELECT *
    FROM
    (
      SELECT
        ST_SnapToGrid(
          ST_SetSrid(
            ST_Point(
              ST_XMin($1) + i*$2,
              ST_YMin($1) + j*$2
            ),
            ST_Srid($1)
          ),
          $3 + $2/2,
          $4 + $2/2,
          $2,
          $2
    ) AS pt
    FROM
      generate_series(0, (ceil(ST_XMax( $1 ) - ST_Xmin( $1 )) / $2)::integer) AS i,
      generate_series(0, (ceil(ST_YMax( $1 ) - ST_Ymin( $1 )) / $2)::integer) AS j) PT
    WHERE
      $1 && ST_Envelope(ST_Buffer(PT.pt, $2/2))
    AND
      ST_Intersects($1, ST_Envelope(ST_Buffer(PT.pt, $2/2)));
    $$ LANGUAGE postgres IMMUTABLE STRICT;

    -- web mercator cells

    CREATE OR REPLACE FUNCTION ST_WebMercatorCells
    (
      geom geometry,
      zoom integer,
      OUT pt geometry
    ) RETURNS SETOF geometry AS
    $$
    SELECT
      ST_Cellify($1, ST_CellSizeZ($2), -20037508.34, -20037508.34) as pt
    $$ LANGUAGE postgres IMMUTABLE STRICT;

    -- ST_ResZ

    CREATE OR REPLACE FUNCTION ST_ResZ
    (
      z integer,
      tilesize integer,
      OUT meter_per_pixel float
    ) RETURNS float AS
    $$
    SELECT (40075016.68 / power(2, $1)) / $2
    $$ LANGUAGE postgres IMMUTABLE STRICT;
    """

REMOVE_FRAMEWORK = \
    """
    DROP FUNCTION ST_PointHash(geometry);
    DROP FUNCTION ST_WebMercatorCells(geometry, integer);
    DROP FUNCTION ST_Cellify(geometry, float8, float8, float8);
    DROP FUNCTION ST_ResZ(integer,integer);
    DROP FUNCTION ST_CellSizeZ(integer);
    """

DROP_OUTPUT_TABLE = \
    """
    DROP TABLE IF EXISTS {output};
    """

CREATE_OUTPUT_TABLE_AND_INDEX = \
    """
    CREATE TABLE {output} AS
    SELECT
      {fid}, {geometry}, {other},
      {rank_by}::float AS cvl_rank,
      {partition_by} AS cvl_partition,
      {zoomlevels} as cvl_zoom
    FROM
      {input};

    CREATE INDEX {output}_gist ON {output} USING GIST({geometry});
    """

# CVL

MERGE_PARTITIONS = \
    """
    UPDATE {output} SET cvl_partition = '{after_merge}' WHERE _partition IN ({before_merge});
    """

MERGE_PARTITIONS_REST = \
    """
    UPDATE {output} SET cvl_partition = '{after_merge}' WHERE _partition NOT IN ({merged});
    """

# Stage commands

COPY_LEVEL = \
    """
    INSERT INTO {output}
    SELECT {fid}, {geometry}, {other}, cvl_rank, cvl_partition, {z} as cvl_zoom
    FROM {output}
    WHERE _zoom = {copy_from};
    """

INITIALIZE_LEVEL = \
    """
    CREATE TEMPORARY TABLE _deletions ({fid} integer, cvl_rank float);
    CREATE TEMPORARY TABLE _conflicts (conflict_id text, {fid} integer, cvl_rank float, min_hits integer);
    """

FORCE_LEVEL = \
    """
    DELETE FROM {output}
    WHERE cvl_zoom = {current_z}
    AND cvl_partition = {delete_partition};
    """

FIND_CONFLICTS = \
    """
    INSERT INTO _conflicts
    SELECT
        s.conflict_id,
        s.{fid},
        s.cvl_rank,
        s.min_hits
    FROM ({constraint_select}) s;
    """

FIND_CONFLICTS_IGNORE = \
    """
    INSERT INTO _conflicts
    SELECT
        s.conflict_id,
        s.{fid},
        s.cvl_rank,
        s.min_hits
    FROM ({constraint_select}) s
    WHERE s.cvl_partition NOT IN ({ignored_partitions});
    """

FIND_DELETIONS = \
    """
    INSERT INTO _deletions
    SELECT sol.{fid}, sol.cvl_rank FROM ({solution}) sol;
    """

APPLY_DELETIONS = \
    """
    DELETE FROM {output}
    WHERE
        cvl_zoom = {current_z}
    AND {fid} IN (SELECT {fid} FROM _deletions);
    """

ALLORNOTHING = \
    """
    DELETE FROM {output}
    WHERE cvl_zoom = {current_z}
    AND cvl_partition IN
    (
      SELECT low.cvl_partition FROM
      (
        SELECT cvl_partition, count(*) AS count
        FROM {output}
        WHERE cvl_zoom= {current_z}
        GROUP BY cvl_partition
      ) low
      JOIN
      (
        SELECT cvl_partition, count(*) AS count
        FROM {output}
        WHERE cvl_zoom = {current_z} + 1
        GROUP BY cvl_partition
      ) high
      ON low.cvl_partition = high.cvl_partition
      WHERE low.count < high.count);
    """

SIMPLIFY = \
    """
    UPDATE {output} SET {geometry} = ST_Simplify({geometry}, ST_ResZ({current_z}, 256)/2) WHERE _zoom={current_z};
    """

CLEAN_LEVEL = \
    """
    DROP TABLE _conflicts;
    DROP TABLE _deletions;
    """

# Finalizing

SIMPLIFY_ALL = \
    """
    UPDATE {output} SET {geometry} = ST_Simplify({geometry}, ST_ResZ(_zoom, 256)/2);
    """

# COMMENTS

COMMENT = "-- {comment}"


TRYTHIS = \
    """
    -- Records per zoom-level:
    -- SELECT cvl_zoom, cvl_partition, Count(*)
    -- FROM {output} GROUP BY cvl_zoom, cvl_partition ORDER BY cvl_zoom, cvl_partition;

    -- Aggregated rank per zoom-level:
    -- SELECT cvl_zoom, Sum(cvl_rank) FROM {output} GROUP BY cvl_zoom ORDER BY cvl_zoom
    """
